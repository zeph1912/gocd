<?xml version="1.0" encoding="UTF-8"?><!--
  ~ Copyright 2018 ThoughtWorks, Inc.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Property">
    <insert id="saveProperty" parameterType="java.util.Map">
        INSERT INTO properties (buildId, key, value) VALUES (#{instanceId}, #{propertyName}, #{value})
        <selectKey keyProperty="id" resultType="long" order="AFTER">
            CALL IDENTITY();
        </selectKey>
    </insert>

    <select id="getProperty" parameterType="java.util.Map" resultType="java.lang.String">
        SELECT value FROM properties
        WHERE buildId = #{instanceId} AND key = #{propertyName}
    </select>

    <select id="getAllPropertiesByBuildInstanceId" parameterType="long" resultType="com.thoughtworks.go.config.Property">
        SELECT key, value FROM properties
        WHERE buildId = #{value}
        ORDER BY key
    </select>

    <select id="limitedPipelineIds" resultType="long">
        SELECT pipelineId
        FROM _builds
        WHERE stageName = #{stage}
        AND name = #{build}
        AND pipelineName = #{pipeline}
        <if test="pipelineId != null and pipelineId != ''">
            AND pipelineId &lt;= #{pipelineId}
        </if>
        GROUP BY pipelineId
        ORDER BY pipelineId DESC
        LIMIT #{limitCount}
    </select>

    <select id="getAllPropertiesHistory" resultType="java.util.HashMap">
        SELECT pipelines.id AS pipelineid, key AS key, value AS value
        FROM properties
        INNER JOIN builds ON builds.id = properties.buildId AND builds.name = #{build}
        INNER JOIN stages ON stages.id = builds.stageId AND stages.name = #{stage}
        INNER JOIN pipelines ON pipelines.id = stages.pipelineId AND
        pipelines.name = #{pipeline} AND
        pipelines.id &lt;= #{maxId} AND
        pipelines.id &gt;= #{minId}

        <if test="propertyName != null and propertyName != ''">
            WHERE key = #{propertyName}
        </if>

        ORDER BY builds.id, key
    </select>

</mapper>
